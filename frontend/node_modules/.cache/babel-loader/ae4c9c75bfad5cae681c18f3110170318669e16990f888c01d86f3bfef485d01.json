{"ast":null,"code":"\"use client\";\n\n// src/toggle.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar NAME = \"Toggle\";\nvar Toggle = React.forwardRef((props, forwardedRef) => {\n  const {\n    pressed: pressedProp,\n    defaultPressed,\n    onPressedChange,\n    ...buttonProps\n  } = props;\n  const [pressed, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed ?? false,\n    caller: NAME\n  });\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-pressed\": pressed,\n    \"data-state\": pressed ? \"on\" : \"off\",\n    \"data-disabled\": props.disabled ? \"\" : void 0,\n    ...buttonProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => {\n      if (!props.disabled) {\n        setPressed(!pressed);\n      }\n    })\n  });\n});\nToggle.displayName = NAME;\nvar Root = Toggle;\nexport { Root, Toggle };","map":{"version":3,"names":["React","composeEventHandlers","useControllableState","Primitive","jsx","NAME","Toggle","forwardRef","props","forwardedRef","pressed","pressedProp","defaultPressed","onPressedChange","buttonProps","setPressed","prop","onChange","defaultProp","caller","button","type","disabled","ref","onClick","displayName","Root"],"sources":["C:\\Users\\komun\\booking-app\\frontend\\node_modules\\@radix-ui\\react-toggle\\src\\toggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed, onPressedChange, ...buttonProps } = props;\n\n  const [pressed, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed ?? false,\n    caller: NAME,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n"],"mappings":";;;AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,oBAAA,QAA4B;AACrC,SAASC,oBAAA,QAA4B;AACrC,SAASC,SAAA,QAAiB;AAsCtB,SAAAC,GAAA;AAhCJ,IAAMC,IAAA,GAAO;AAqBb,IAAMC,MAAA,GAAeN,KAAA,CAAAO,UAAA,CAAuC,CAACC,KAAA,EAAOC,YAAA,KAAiB;EACnF,MAAM;IAAEC,OAAA,EAASC,WAAA;IAAaC,cAAA;IAAgBC,eAAA;IAAiB,GAAGC;EAAY,IAAIN,KAAA;EAElF,MAAM,CAACE,OAAA,EAASK,UAAU,IAAIb,oBAAA,CAAqB;IACjDc,IAAA,EAAML,WAAA;IACNM,QAAA,EAAUJ,eAAA;IACVK,WAAA,EAAaN,cAAA,IAAkB;IAC/BO,MAAA,EAAQd;EACV,CAAC;EAED,OACE,eAAAD,GAAA,CAACD,SAAA,CAAUiB,MAAA,EAAV;IACCC,IAAA,EAAK;IACL,gBAAcX,OAAA;IACd,cAAYA,OAAA,GAAU,OAAO;IAC7B,iBAAeF,KAAA,CAAMc,QAAA,GAAW,KAAK;IACpC,GAAGR,WAAA;IACJS,GAAA,EAAKd,YAAA;IACLe,OAAA,EAASvB,oBAAA,CAAqBO,KAAA,CAAMgB,OAAA,EAAS,MAAM;MACjD,IAAI,CAAChB,KAAA,CAAMc,QAAA,EAAU;QACnBP,UAAA,CAAW,CAACL,OAAO;MACrB;IACF,CAAC;EAAA,CACH;AAEJ,CAAC;AAEDJ,MAAA,CAAOmB,WAAA,GAAcpB,IAAA;AAIrB,IAAMqB,IAAA,GAAOpB,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}